---
title: Preparing a Service Offering
owner: Platform Engineering (TSMGR Team)
---

<strong><%= modified_date %></strong>

This topic describes how to prepare an offered service for <%= vars.product_full %>
(<%= vars.product_short %>).

For working examples, see [tsmgr-samples](https://github.com/cf-platform-eng/tsmgr-samples) in
GitHub.

## <a id='using'></a> Overview

<%= vars.product_short %> enables platform operators to offer Helm charts as
on-demand services to developers on <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>).

Before you add a service offering to `cf marketplace`, you must configure the
<%= vars.product_short %> package.
You can also configure the package to enable additional features.

To prepare a service offering:

1. [Create a Sample Service Offering Directory](#offer-init)
1. [(Optional) Create <%= vars.product_cli %>.yaml](#yaml)
1. [(Optional) Override Chart Values](#override)
1. [(Optional) Define Plans Configuration](#plans)
1. [(Optional) Offer Multiple Charts in a Single Offering](#multiple-charts)
1. [(Optional) Create Binding Template for App Consumption](#env)
1. [Load Container Images into a Private Container Registry](#images)
1. [Ensure Your Images are Accessible](#access)


## <a id='prereq'></a> Prerequisites

Before you add your service offering to <%= vars.product_short %>, you must:

+ **Determine which YAML files you want to include in the service offering:**
  For more information, see [About Service Offerings](./about-offer.html).
+ **Install the <%= vars.product_short %> Command Line Interface (CLI):**
For more information, see [Install the <%= vars.product_short %> CLI](installing.html#cli).
+ **Register a Kubernetes cluster using the <%= vars.product_short %> CLI:**
For more information, see [Managing Kubernetes Clusters for <%= vars.product_full %>](managing-clusters.html).
+ **Install External Dependencies:** If your Helm charts have any external dependencies,
they must be installed before you offer your service.
For example, if your Helm chart requires an Ingress controller to enable service through ingress, the
Ingress controller must be manually installed onto the cluster.<br><br>
For information about Ingress, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/).


## <a id='offer-init'></a> Create a Sample Service Offering Directory

You can use the <%= vars.product_short %> CLI to create a directory structure for your service
offering.
When you create the service offering directory with the <%= vars.product_short %> CLI, the directory
includes the following sample files:

+ `OFFER-NAME/bind.yaml`
+ `OFFER-NAME/<%= vars.product_cli %>.yaml`
+ `OFFER-NAME/plans.yaml`
+ `OFFER-NAME/plans/small.yaml`
+ `OFFER-NAME/plans/medium.yaml`
+ `OFFER-NAME/overrides/override-values.yaml`

To create a sample service offering directory:

1. Create a directory for your service offering by running:

    ```
    <%= vars.product_cli %> offer init OFFER-NAME
    ```
    Where `OFFER-NAME` is the name of the service offering.

    <p class="note">
      <strong>Note:</strong> If you do not include a <code>plans.yaml</code>,
      a <code><%= vars.product_cli %>.yaml</code> file, or override files with your service offering,
      one plan is offered. This plan uses the default values for the Helm chart.
    </p>


## <a id='yaml'></a> (Optional) Create <%= vars.product_cli %>.yaml

The `<%= vars.product_cli %>.yaml` file is required to either offer multiple
charts or specify a file overriding a chart's default values.

1. Create the `<%= vars.product_cli %>.yaml` file using either the `init` output or the following as
a template:

    ```yaml
    offer-name: OFFER-NAME
    charts:
      - chart: CHART-NAME
        version: CHART-VERSION-NUMBER
        offered: OFFERED-VALUE
        scope: SCOPE-VALUE
        overrideValuesFile: OVERRIDE-FILE.yaml
    ```
    Where:
    + `OFFER-NAME` is the name of the service offering that developers see when they run
    `cf marketplace`. The service name is listed under `service`.
    + `CHART-NAME` is the name of a chart included in the service offering.
    + `CHART-VERSION-NUMBER` is the version of the chart included in the service offering.
    + `OFFERED-VALUE` is either `true` or `false`. For more information, see the below table.
    + `SCOPE-VALUE` is either `cluster` or `namespace`. For more information, see the below table.
    + (Optional) `OVERRIDE-FILE.yaml` is the name of a file in the overrides
    directory that overrides the chart's default `values.yaml` file.

The following table describes the Helm chart configurations in `<%= vars.product_cli %>.yaml`:

<table>
  <tr>
    <th width=14%>Key</th>
    <th width=21% >Values</th>
    <th>Description</th>
  </tr>

  <tr>
    <td><code>scope</code></td>
    <td><code>cluster</code> or <code>namespace</code></td>
    <td><strong>If you use <code>cluster</code>:</strong> The chart is only deployed once on a
      cluster.
      Subsequent service instances created on the same Kubernetes cluster do not cause a
      cluster-scoped chart to be deployed additional times.
      Use this scope for operators and controllers that manage multiple instances from a single
      deployment.<br><br>
      <strong>If you use <code>namespace</code>:</strong> The chart is deployed on the cluster every
      time the service is created.
    </td>
  </tr>
  <tr>
    <td><code>offered</code></td>
    <td><code>true</code> or <code>false</code></td>
    <td><strong>If you use <code>true</code>:</strong> The <code>scope</code> must be set to
      <code>namespace</code>. Only one chart can be <code>true</code>.
      The offered chart represents the service the user binds to.
      However, you can expose more resources with <code>cf bind-service</code>.<br><br>
      <strong>If you use <code>false</code>:</strong> The chart is not offered.
    </td>
  </tr>
</table>


## <a id='override'></a> (Optional) Override Chart Values

Within an `OVERRIDE-FILE.yaml` file, you can specify any values that you want to apply across all
plans that differ from a chart's default `values.yaml`.

To override chart values:

1. Create an `overrides` directory and an `overrides/OVERRIDE-FILE.yaml` file. <br><br>
    Ensure that the properties you add to `OVERRIDE-FILE.yaml` match the properties in `values.yaml`.

For some common scenarios, see <a href="./configure-helm.html#override">Override Chart Values</a> for
some common scenarios.


## <a id='plans'></a> (Optional) Define Plans Configuration

<p class="note">
  <strong>Note:</strong> The properties in <code>plans.yaml</code> and <code>PLAN-FILE.yaml</code>
  files override configurations in override files.
  For information about override files, see
  <a href="./configure-helm.html#override">Override Chart Values</a>.
</p>

In `cf marketplace`, each service has a set of plans that developers can provision.
A plan is a template for service instances.
For example, different plans might represent a large or a small instance of a database.

For Kubernetes services, each <%= vars.product_short %> plan represents a set of values overriding
the default values in the Helm chart.
These values are configured in `plans.yaml`.
For examples of `plans.yaml` files,
see [<%= vars.product_cli %>-sample](https://github.com/cf-platform-eng/tsmgr-samples) on GitHub.

To override the default settings in `values.yaml` and offer custom plans:

1. Create and edit `plans/PLAN-FILE.yaml` with the Helm values that you want to override.
   `PLAN-FILE.yaml` must consist of only lowercase letters, digits, `.`, or `-`.
    <br><br>
    Ensure that the properties you add to `PLAN-FILE.yaml` match the properties
    in `values.yaml` and that you only change the values.
    <br><br>
    For example:

    ```
    ---
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
    ```

1. (Optional) Create and edit `resource-quotas/RESOURCE-QUOTA-FILE.yaml`
    with the `ResourceQuota` definition you want to use.
    This `ResourceQuota` is created in each Kubernetes namespace where a service instance is
    provisioned.
    For more information about `ResourceQuota` objects, see the
    [Kubernetes documentation](https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-memory-cpu-namespace/).
    <br><br>
    For example:

    ```
    ---
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: mem-cpu-demo
    spec:
      hard:
        requests.cpu: "1"
        requests.memory: 1Gi
        limits.cpu: "2"
        limits.memory: 2Gi
    ```

1. Edit your `plans.yaml` file to add your custom plan information using the following template:

    ```
    - name: PLAN-NAME
      description: PLAN-DESCRIPTION
      file: PLAN-FILE
      clusterName: CLUSTER-NAME
      resourceQuotaPath: RESOURCE-QUOTA-FILE
    ```
    Where:
    * `PLAN-NAME` is the name of the plan that developers see when they run `cf marketplace`.
        The plan name is listed under `plans`.
       Ensure that the plan name is lowercase only and contains no special characters.
    * `PLAN-DESCRIPTION` is the description of the plan that developers see when they run
    `cf marketplace`. The plan description is listed under `description`.
    * `PLAN-FILE` is the name of the plan file in the `plans` subdirectory.
    * (Optional) `CLUSTER-NAME` is the name of a cluster that is registered with
    <%= vars.product_short %>.
    For more information, see [Register a Kubernetes Cluster](managing-clusters.html#registering).
    If omitted, service instances are provisioned to the default cluster.
    For more information, see [Set a Default Cluster](managing-clusters.html#registering).
    * (Optional) `RESOURCE-QUOTA-FILE` is name of the resource quota file for the plan.

    For example:

    ```
    - name: "small"
      description: "default (small) plan for mysql"
      file: "small.yaml"
      resourceQuotaPath: "quota.yaml"
    - name: "medium"
      description: "medium sized plan for mysql"
      file: "medium.yaml"
      clusterName: "medium-cluster"
    ```

<%= partial vars.path_to_partials + "/ksm/config-params" %>


## <a id='multiple-charts'></a> (Optional) Offer Multiple Charts in a Single Offering

<%= vars.product_short %> enables you to offer multiple Helm charts in a single service offering.
You might want to offer multiple Helm charts in the following cases:

* A cluster-scoped operator or controller where the individual charts are custom resources
* A namespace-scoped operator chart with another chart that represents the custom resource
* A service that uses multiple charts.
For example, a service that uses a data service chart and a monitoring service chart.

To offer a service with multiple Helm charts, you must edit the `<%= vars.product_cli %>.yaml` file.
The `charts` section in a `<%= vars.product_cli %>.yaml` file is an ordered list of the charts that
are included in the service offering.

For the full details of this file, see [(Optional) Create <%= vars.product_cli %>.yaml](#yaml).


## <a id='env'></a> (Optional) Create Binding Template for App Consumption

Apps running in <%= vars.app_runtime_abbr %> gain access to bound service instances through an
environment variable credentials hash called `VCAP_SERVICES`.
Libraries such as Spring Cloud Cloud Foundry Connector automatically support services if their
credentials in `VCAP_SERVICES` are formatted in a valid JSON object.

For an example of the requirements for using Spring Cloud Cloud Foundry Connector with a MySQL
service, see the
[Spring Cloud Cloud Foundry Connector documentation](https://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html#_mysql).

Chart authors can edit the `bind.yaml` file to enable the broker to return a valid JSON object
containing service credentials.
This `bind.yaml` file contains a Jsonnet template.
When a developer binds the service instance to their app, the service credentials are delivered to
`VCAP_SERVICES` for app consumption.

For information about Jsonnet templates, see [Jsonnet](https://jsonnet.org).

To edit and test the `bind.yaml` file:

1. Edit the `bind.yaml` file. <br><br>
For example, the following `bind.yaml` enables the broker to return MySQL credentials in a valid JSON
object:

    ```
    template: |
      {
        hostname: $.services[0].status.loadBalancer.ingress[0].ip,
        name: $.services[0].name,
        jdbcUrl: "jdbc:mysql://" + self.hostname + "/my_db?user=" + self.username + "&password=" + self.password + "&useSSL=false",
        uri: "mysql://" + self.username + ":" + self.password + "@" + self.hostname + ":" + self.port + "/my_db?reconnect=true",
        password: $.secrets[0].data['mysql-root-password'],
        port: 3306,
        username: "root"
      }
    ```
    <p class="note">
      <strong>Note:</strong> The values of <code>$.services</code>, <code>$.secrets</code>
      and <code>$.ingresses</code> are from the namespace where the chart is deployed.
    </p>

1. Test if the `bind.yaml` template creates the expected JSON object:

    1. Ensure that you have registered a cluster.
       See [Managing Clusters](./managing-clusters.html).<br><br>

    1. Ensure that your kubectl points to the registered cluster.<br><br>

    1. Install the Helm chart that you are including in the service offering.
       Wait for the service to be ready and for the public IP address to be available:

        ```bash
        kubectl create namespace NAMESPACE
        helm install RELEASE-NAME HELM-CHART.tgz -n NAMESPACE --set service.type=LoadBalancer --wait
        ```
        Where:
        + `RELEASE-NAME` is the name of the release instance you are creating.
        + `HELM-CHART` is the Helm chart filename.
        + `NAMESPACE` is the name of the namespace in which you are installing your Helm chart.

        For example:
        <pre class="terminal">
        kubectl create namespace mysql-ns
        helm install mysql mysql-0.1.4.tgz -n mysql-ns --set service.type=LoadBalancer --wait
        </pre>

    1. Execute the `test-bind-template` by running:

        ```
        <%= vars.product_cli %> test-bind-template CLUSTER-NAME NAMESPACE bind.yaml
        ```
        Where:
        + `CLUSTER-NAME` is the name of the <%= vars.product_short %>-registered cluster
         where your chart is installed.
        + `NAMESPACE` is the name of the namespace in which you installed your Helm chart.

        For example:
        <pre class="terminal">
          $ <%= vars.product_cli %> test-bind-template my-cluster mysql-ns ./bind.yaml
          Services, secrets, and ingress:
          {
              "secrets": [
                  {
                      "data": {
                          "mysql-password": "aBcDefG1HIJ",
                          "mysql-root-password": "kLmNoP2qrSt3"
                      },
                      "name": "1-23456789-mysql"
                  },
              ],
              "services": [
                  {
                      "metadata": {
                          "name": "1-23456789-mysql",
                          "namespace": "<%= vars.product_cli %>-f5d531d5-7b07-4bc0-8114-8aba5e2bd706",
                          "uid": "9f2d94c1-4900-11ea-a03a-42010a800053",
                          "resourceVersion": "4943530",
                          "creationTimestamp": "2020-02-06T16:49:20Z",
                          "labels": {
                              "app": "1-23456789-mysql",
                              "heritage": "Helm",
                              "release": "1-23456789"
                          }
                      },
                      "name": "1-23456789-mysql",
                      "spec": {
                          "ports": [
                              {
                                  "name": "mysql",
                                  "protocol": "TCP",
                                  "port": 3306,
                                  "targetPort": "mysql",
                                  "nodePort": 32257
                              }
                          ],
                          "selector": {
                              "app": "1-23456789-mysql"
                          },
                          "clusterIP": "10.24.2.216",
                          "type": "LoadBalancer",
                          "sessionAffinity": "None",
                          "externalTrafficPolicy": "Cluster"
                      },
                      "status": {
                          "loadBalancer": {
                              "ingress": [
                                  {
                                      "ip": "33.44.55.66"
                                  }
                              ]
                          }
                      }
                  }
              ]
          }
          Rendered template {
             "hostname": "33.44.55.66",
             "jdbcUrl": "jdbc&#58;mysql&#58;//33.44.55.66/my&#95;db?user=root&password=kLmNoP2qrSt3&useSSL=false",
             "name": "1-23456789-mysql",
             "password": "kLmNoP2qrSt3",
             "port": 3306,
             "uri": "mysql&#58;//root&#58;kLmNoP2qrSt3&#64;33.44.55.66:3306/my_db?reconnect=true",
             "username": "root"
          }
        </pre>

    1. Examine the output. The first part shows the available secrets and services information.
    The `Rendered template` section shows how the `bind.yaml` template rendered the data.


## <a id='images'></a> Load Container Images into a Private Container Registry

VMware recommends using a private container image registry in production.
<%= vars.product_short %> can then modify your Helm charts to point to images in the private
container registry.

If either of the following applies, you must configure a private container registry:

+ Your environment is air-gapped and cannot connect to public container registries such as
Docker Hub or Quay.
For information about commonly used public container registries,
see [Docker Hub](https://hub.docker.com/), [Harbor](https://goharbor.io/), and
[Quay](https://quay.io/).
+ The images referenced in the Helm chart are not public.

If you do not load your container images in to a private container registry, a developer cannot
create a service instance offered on <%= vars.product_short %>.

To load your container images:

1. Load your container images by following the instructions for your specific container registry.
For example, if you use Harbor, follow the instructions in
[Pulling and pushing images using Docker client](https://goharbor.io/docs/2.0.0/working-with-projects/working-with-images/pulling-pushing-images/)
in GitHub.


## <a id='access'></a> Ensure Your Images are Accessible

When you provision a service, the image paths in your Helm charts need to be
accurate so that Kubernetes can pull the images from the correct repository.

To configure the image paths:

1. Search your service's Helm chart `values.yaml` file for `global.imageRegistry`:
    * If `global.imageRegistry` is set in the chart's `values.yaml`, no further action is required.
    * If `global.imageRegistry` is supported and unset in the chart's `values.yaml`, set
    `imageCredentialsForServiceInstances.registry` in the <%= vars.product_short %> Helm chart.<br>
     <%= vars.product_short %> pulls the images from the registry at `imageCredentialsForServiceInstances.registry`.
    * If your chart does not support the `global.imageRegistry` pattern, edit `overrides.yaml`
    to override the image fields to point to the private registry where the images are hosted.<br>
    Charts often contain multiple images. For example, the chart values excerpt below
    sets values for both the `mysql` and `mysqld-exporter` images:

        ```
        ...
        image: "mysql"
        imageTag: "5.7.30"
        ...
        metrics:
          enabled: false
          image: prom/mysqld-exporter
          imageTag: v0.10.0
          imagePullPolicy: IfNotPresent
        ```
        If the registry path were `registry.example.com/my-project`, then `overrides.yaml` must
        contain:

        ```
        image: "registry.example.com/my-project/mysql"
        metrics:
          image: registry.example.com/my-project/prom/mysqld-exporter
        ```
        To edit `overrides.yaml`, follow the procedure in
        [Override Chart Values](prepare-offer.html#override).
